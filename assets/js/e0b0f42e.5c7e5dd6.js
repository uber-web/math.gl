"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[700],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>k});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),u=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},m=function(e){var t=u(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,l=e.originalType,p=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=u(r),d=n,k=c["".concat(p,".").concat(d)]||c[d]||s[d]||l;return r?a.createElement(k,o(o({ref:t},m),{},{components:r})):a.createElement(k,o({ref:t},m))}));function k(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=r.length,o=new Array(l);o[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[c]="string"==typeof e?e:n,o[1]=i;for(var u=2;u<l;u++)o[u]=r[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},9502:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>s,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var a=r(7462),n=(r(7294),r(3905));const l={},o="Euler",i={unversionedId:"modules/core/api-reference/euler",id:"modules/core/api-reference/euler",title:"Euler",description:"A class to handle Euler rotation. More information on rotation using a Euler vector can be found here. Generally speaking the three components of the Euler object represents the roll, pitch and yaw angles and the rotation is applied according to a specific rotation order.",source:"@site/../docs/modules/core/api-reference/euler.md",sourceDirName:"modules/core/api-reference",slug:"/modules/core/api-reference/euler",permalink:"/math.gl/docs/modules/core/api-reference/euler",draft:!1,editUrl:"https://github.com/uber-web/math.gl/tree/master/website/../docs/modules/core/api-reference/euler.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/math.gl/docs/modules/core/"},next:{title:"MathArray",permalink:"/math.gl/docs/modules/core/api-reference/math-array"}},p={},u=[{value:"Usage",id:"usage",level:2},{value:"Constants",id:"constants",level:2},{value:"Members",id:"members",level:2},{value:"x, y z",id:"x-y-z",level:3},{value:"roll, pitch, yaw",id:"roll-pitch-yaw",level:3},{value:"alpha, beta, gamma",id:"alpha-beta-gamma",level:3},{value:"phi, theta, psi",id:"phi-theta-psi",level:3},{value:"order",id:"order",level:3},{value:"Methods",id:"methods",level:2},{value:"constructor",id:"constructor",level:3},{value:"fromRollPitchYaw",id:"fromrollpitchyaw",level:3},{value:"fromRotationMatrix",id:"fromrotationmatrix",level:3},{value:"fromQuaternion",id:"fromquaternion",level:3},{value:"copy",id:"copy",level:3},{value:"set",id:"set",level:3},{value:"toArray",id:"toarray",level:3},{value:"toArray4",id:"toarray4",level:3},{value:"toVector3",id:"tovector3",level:3},{value:"fromVector3",id:"fromvector3",level:3},{value:"fromArray",id:"fromarray",level:3},{value:"getRotationMatrix",id:"getrotationmatrix",level:3},{value:"getQuaternion",id:"getquaternion",level:3},{value:"Remarks",id:"remarks",level:2}],m={toc:u},c="wrapper";function s(e){let{components:t,...r}=e;return(0,n.kt)(c,(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"euler"},"Euler"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"class Euler extends MathArray extends Array\n")),(0,n.kt)("p",null,"A class to handle Euler rotation. More information on rotation using a Euler vector can be found ",(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Euler%27s_rotation_theorem"},"here"),". Generally speaking the three components of the Euler object represents the roll, pitch and yaw angles and the rotation is applied according to a specific rotation order."),(0,n.kt)("h2",{id:"usage"},"Usage"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"import {Euler} from '@math.gl/core';\n")),(0,n.kt)("h2",{id:"constants"},"Constants"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"Euler.ZYX"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"Euler.YXZ"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"Euler.XZY"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"Euler.ZXY"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"Euler.YZX"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"Euler.XYZ"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"Euler.RollPitchYaw"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"Euler.DefaultOrder")," (= ",(0,n.kt)("inlineCode",{parentName:"p"},"Euler.ZYX"),")")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"Euler.RotationOrders")," = ",(0,n.kt)("inlineCode",{parentName:"p"},"['ZYX', 'YXZ', 'XZY', 'ZXY', 'YZX', 'XYZ']"),";"))),(0,n.kt)("h2",{id:"members"},"Members"),(0,n.kt)("h3",{id:"x-y-z"},"x, y z"),(0,n.kt)("p",null,"x, y, z angle notation (note: only corresponds to axis in XYZ orientation)"),(0,n.kt)("h3",{id:"roll-pitch-yaw"},"roll, pitch, yaw"),(0,n.kt)("p",null,"roll, pitch, yaw angle notation"),(0,n.kt)("h3",{id:"alpha-beta-gamma"},"alpha, beta, gamma"),(0,n.kt)("p",null,"alpha, beta, gamma angle notation"),(0,n.kt)("h3",{id:"phi-theta-psi"},"phi, theta, psi"),(0,n.kt)("p",null,"phi, theta, psi angle notation"),(0,n.kt)("h3",{id:"order"},"order"),(0,n.kt)("p",null,"rotation order in all notations"),(0,n.kt)("h2",{id:"methods"},"Methods"),(0,n.kt)("h3",{id:"constructor"},"constructor"),(0,n.kt)("p",null,"(x = 0, y = 0, z = 0, order = Euler.DefaultOrder)"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Number|Number[], Number, Number, Number")),(0,n.kt)("h3",{id:"fromrollpitchyaw"},"fromRollPitchYaw"),(0,n.kt)("p",null,"Common ZYX rotation order"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"euler.fromRollPitchYaw(roll, pitch, yaw)")),(0,n.kt)("h3",{id:"fromrotationmatrix"},"fromRotationMatrix"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"euler.fromRotationMatrix(m, order = Euler.DefaultOrder)")),(0,n.kt)("h3",{id:"fromquaternion"},"fromQuaternion"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"euler.fromQuaternion(q, order)")),(0,n.kt)("h3",{id:"copy"},"copy"),(0,n.kt)("p",null,"If copied array does contain fourth element, preserves currently set order."),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"euler.copy(array)")),(0,n.kt)("h3",{id:"set"},"set"),(0,n.kt)("p",null,"Sets the three angles, and optionally sets the rotation order. If order is not specified, preserves currently set order."),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"euler.set(x = 0, y = 0, z = 0, order)")),(0,n.kt)("h3",{id:"toarray"},"toArray"),(0,n.kt)("p",null,"Does not copy the orientation element"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"euler.toArray(array = [], offset = 0)")),(0,n.kt)("h3",{id:"toarray4"},"toArray4"),(0,n.kt)("p",null,"Copies the orientation element"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"euler.toArray4(array = [], offset = 0)")),(0,n.kt)("h3",{id:"tovector3"},"toVector3"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"euler.toVector3(optionalResult)")),(0,n.kt)("h3",{id:"fromvector3"},"fromVector3"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"euler.fromVector3(v, order)")),(0,n.kt)("h3",{id:"fromarray"},"fromArray"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"euler.fromArray(array, offset = 0)")),(0,n.kt)("h3",{id:"getrotationmatrix"},"getRotationMatrix"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"euler.getRotationMatrix(m = new Matrix4())")),(0,n.kt)("p",null,"Returns ",(0,n.kt)("inlineCode",{parentName:"p"},"Matrix4")," - a rotation matrix corresponding to rotations per the specified euler angles"),(0,n.kt)("h3",{id:"getquaternion"},"getQuaternion"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"euler.getQuaternion()")),(0,n.kt)("h2",{id:"remarks"},"Remarks"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Attribution: inspired by THREE.js ",(0,n.kt)("inlineCode",{parentName:"li"},"THREE.Euler")," class")))}s.isMDXComponent=!0}}]);