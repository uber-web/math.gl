"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[6991],{4137:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=o.createContext({}),c=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=c(e.components);return o.createElement(p.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},g=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),s=c(n),g=r,m=s["".concat(p,".").concat(g)]||s[g]||u[g]||i;return n?o.createElement(m,l(l({ref:t},d),{},{components:n})):o.createElement(m,l({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=g;var a={};for(var p in t)hasOwnProperty.call(t,p)&&(a[p]=t[p]);a.originalType=e,a[s]="string"==typeof e?e:r,l[1]=a;for(var c=2;c<i;c++)l[c]=n[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}g.displayName="MDXCreateElement"},5054:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var o=n(7462),r=(n(7294),n(4137));const i={},l="Polygon",a={unversionedId:"modules/polygon/api-reference/polygon",id:"modules/polygon/api-reference/polygon",title:"Polygon",description:"Allows an array of points (whether closed or non-closed) to be treated as a Polygon.",source:"@site/../docs/modules/polygon/api-reference/polygon.md",sourceDirName:"modules/polygon/api-reference",slug:"/modules/polygon/api-reference/polygon",permalink:"/math.gl/docs/modules/polygon/api-reference/polygon",draft:!1,editUrl:"https://github.com/uber-web/math.gl/tree/master/website/../docs/modules/polygon/api-reference/polygon.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"cutPolylineByMercatorBounds",permalink:"/math.gl/docs/modules/polygon/api-reference/cut-polyline-by-mercator-bounds"},next:{title:"Overview",permalink:"/math.gl/docs/modules/proj4/"}},p={},c=[{value:"Usage",id:"usage",level:2},{value:"Methods",id:"methods",level:2},{value:"constructor",id:"constructor",level:3},{value:"getSignedArea",id:"getsignedarea",level:3},{value:"getArea",id:"getarea",level:3},{value:"getWindingDirection",id:"getwindingdirection",level:3},{value:"forEachSegment",id:"foreachsegment",level:3},{value:"modifyWindingDirection",id:"modifywindingdirection",level:3},{value:"Remarks",id:"remarks",level:2}],d={toc:c},s="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(s,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"polygon"},"Polygon"),(0,r.kt)("p",null,"Allows an array of points (whether closed or non-closed) to be treated as a Polygon."),(0,r.kt)("p",null,"Implements the ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Shoelace_formula"},"Shoelace formula")," for determining the area and winding direction of an arbitrary polygon."),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {Polygon} from '@math.gl/polygon';\n")),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"constructor"},"constructor"),(0,r.kt)("p",null,"Creates a new Polygon object."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The polygon object will reference the provided points, assuming them to not be modified for the lifetime of the Polygon object.")),(0,r.kt)("h3",{id:"getsignedarea"},"getSignedArea"),(0,r.kt)("p",null,"Returns the area with a sign indicating the winding direction."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"polygon.getSignedArea()")),(0,r.kt)("h3",{id:"getarea"},"getArea"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"polygon.getArea()")),(0,r.kt)("p",null,"Note:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A convenience method that returns ",(0,r.kt)("inlineCode",{parentName:"li"},"Math.abs(polygon.getSignedArea())"),".")),(0,r.kt)("h3",{id:"getwindingdirection"},"getWindingDirection"),(0,r.kt)("p",null,"Returns the direction of the polygon path."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"polygon.getWindingDirection()")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A positive number is clockwise."),(0,r.kt)("li",{parentName:"ul"},"A negative number is counter clockwise.")),(0,r.kt)("p",null,"Note:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A convenience method that returns ",(0,r.kt)("inlineCode",{parentName:"li"},"Math.sign(polygon.getSignedArea())"))),(0,r.kt)("h3",{id:"foreachsegment"},"forEachSegment"),(0,r.kt)("p",null,"Lets the application iterate over each segment."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"polygon.forEachSegment((p1, p2) => ...);")),(0,r.kt)("h3",{id:"modifywindingdirection"},"modifyWindingDirection"),(0,r.kt)("p",null,"Checks winding direction of the polygon and reverses the polygon in case if opposite winding direction. Note: points of the polygon are modified in-place."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A positive number is clockwise."),(0,r.kt)("li",{parentName:"ul"},"A negative number is counter clockwise.")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"polygon.modifyWindingDirection(direction);")),(0,r.kt)("p",null,"Returns:"),(0,r.kt)("p",null,"Returns true if the winding direction was changed."),(0,r.kt)("h2",{id:"remarks"},"Remarks"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To avoid having to copy a non-closed path to be able to treat it as a polygon (by adding a copy of the first vertex to then end of the path),\ninstead we define a ",(0,r.kt)("inlineCode",{parentName:"li"},"forEachSegment")," iteration method that makes sure the last segment is iterated over.")))}u.isMDXComponent=!0}}]);