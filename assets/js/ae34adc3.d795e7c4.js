"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[2998],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>y});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},l=Object.keys(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=i.createContext({}),s=function(e){var n=i.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return i.createElement(p.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),u=s(t),d=r,y=u["".concat(p,".").concat(d)]||u[d]||m[d]||l;return t?i.createElement(y,o(o({ref:n},c),{},{components:t})):i.createElement(y,o({ref:n},c))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=d;var a={};for(var p in n)hasOwnProperty.call(n,p)&&(a[p]=n[p]);a.originalType=e,a[u]="string"==typeof e?e:r,o[1]=a;for(var s=2;s<l;s++)o[s]=t[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7072:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>a,toc:()=>s});var i=t(7462),r=(t(7294),t(3905));const l={},o="clipPolyline",a={unversionedId:"modules/polygon/api-reference/clip-polyline",id:"modules/polygon/api-reference/clip-polyline",title:"clipPolyline",description:"Clips a polyline with a bounding box.",source:"@site/../docs/modules/polygon/api-reference/clip-polyline.md",sourceDirName:"modules/polygon/api-reference",slug:"/modules/polygon/api-reference/clip-polyline",permalink:"/math.gl/docs/modules/polygon/api-reference/clip-polyline",draft:!1,editUrl:"https://github.com/uber-web/math.gl/tree/master/website/../docs/modules/polygon/api-reference/clip-polyline.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"clipPolygon",permalink:"/math.gl/docs/modules/polygon/api-reference/clip-polygon"},next:{title:"cutPolygonByGrid",permalink:"/math.gl/docs/modules/polygon/api-reference/cut-polygon-by-grid"}},p={},s=[{value:"Usage",id:"usage",level:2}],c={toc:s},u="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"clippolyline"},"clipPolyline"),(0,r.kt)("p",{class:"badges"},(0,r.kt)("img",{src:"https://img.shields.io/badge/From-v3.2-blue.svg?style=flat-square",alt:"From-v3.2"})),(0,r.kt)("p",null,"Clips a polyline with a bounding box."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {clipPolyline} from '@math.gl/polygon';\n\nclipPolyline([-10, -10, 10, 10, 30, -10], [0, 0, 20, 20], {size: 2});\n// returns [[0, 0, 10, 10, 20, 0]]\n")),(0,r.kt)("p",null,"The clipping bounds are defined as an orthoganal rectangle on the XY plane. If a 3D polyline is supplied, it is clipped by the extuded volume from the bounding box."),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"clipPolyline(positions, bbox, [options]);\n")),(0,r.kt)("p",null,"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"positions")," (Array|TypedArray) - a flat array of the vertex positions that define the polyline."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"bbox")," (Array) - the bounding box, in ",(0,r.kt)("inlineCode",{parentName:"li"},"[minX, minY, maxX, maxY]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"options")," (Object, optional)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"size")," (Number) - the number of elements in each vertex. Size ",(0,r.kt)("inlineCode",{parentName:"li"},"2")," will interpret ",(0,r.kt)("inlineCode",{parentName:"li"},"positions")," as ",(0,r.kt)("inlineCode",{parentName:"li"},"[x0, y0, x1, y1, ...]")," and size ",(0,r.kt)("inlineCode",{parentName:"li"},"3")," will interpret ",(0,r.kt)("inlineCode",{parentName:"li"},"positions")," as ",(0,r.kt)("inlineCode",{parentName:"li"},"[x0, y0, z0, x1, y1, z1, ...]"),". Default ",(0,r.kt)("inlineCode",{parentName:"li"},"2"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"startIndex")," (Number, optional) - the index in ",(0,r.kt)("inlineCode",{parentName:"li"},"positions")," to start reading vertices. Default ",(0,r.kt)("inlineCode",{parentName:"li"},"0"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"endIndex")," (Number, optional) - the index in ",(0,r.kt)("inlineCode",{parentName:"li"},"positions")," to stop reading vertices. Default ",(0,r.kt)("inlineCode",{parentName:"li"},"positions.length"),".")))),(0,r.kt)("p",null,"Returns:"),(0,r.kt)("p",null,"An array of polylines that are parts of the original polyline and contained by the given bounding box. Each polyline is represented by a positions array that uses the same vertex size as the input."),(0,r.kt)("p",null,"If the input polyline is entirely outside of the bounding box, an empty array will be returned."))}m.isMDXComponent=!0}}]);