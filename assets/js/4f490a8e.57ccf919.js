"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[3367],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),c=s(n),y=i,m=c["".concat(p,".").concat(y)]||c[y]||d[y]||o;return n?r.createElement(m,l(l({ref:t},u),{},{components:n})):r.createElement(m,l({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,l=new Array(o);l[0]=y;var a={};for(var p in t)hasOwnProperty.call(t,p)&&(a[p]=t[p]);a.originalType=e,a[c]="string"==typeof e?e:i,l[1]=a;for(var s=2;s<o;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},2438:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>s});var r=n(7462),i=(n(7294),n(3905));const o={},l="cutPolygonByGrid",a={unversionedId:"modules/polygon/api-reference/cut-polygon-by-grid",id:"modules/polygon/api-reference/cut-polygon-by-grid",title:"cutPolygonByGrid",description:"Subdivides a polygon by intersecting with a uniform grid.",source:"@site/../docs/modules/polygon/api-reference/cut-polygon-by-grid.md",sourceDirName:"modules/polygon/api-reference",slug:"/modules/polygon/api-reference/cut-polygon-by-grid",permalink:"/math.gl/docs/modules/polygon/api-reference/cut-polygon-by-grid",draft:!1,editUrl:"https://github.com/uber-web/math.gl/tree/master/website/../docs/modules/polygon/api-reference/cut-polygon-by-grid.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"clipPolyline",permalink:"/math.gl/docs/modules/polygon/api-reference/clip-polyline"},next:{title:"cutPolylineByGrid",permalink:"/math.gl/docs/modules/polygon/api-reference/cut-polyline-by-grid"}},p={},s=[{value:"Usage",id:"usage",level:2}],u={toc:s},c="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"cutpolygonbygrid"},"cutPolygonByGrid"),(0,i.kt)("p",{class:"badges"},(0,i.kt)("img",{src:"https://img.shields.io/badge/From-v3.2-blue.svg?style=flat-square",alt:"From-v3.2"})),(0,i.kt)("p",null,"Subdivides a polygon by intersecting with a uniform grid."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import {cutPolygonByGrid} from '@math.gl/polygon';\n\ncutPolygonByGrid([0, 15, 15, 0, 0, -15, 0, 15], {size: 2, gridResolution: 20});\n// returns [\n//   [15, 0, 0, -15, 0, 0, 15, 0],\n//   [15, 0, 0, 0, 0, 15, 15, 0]\n// ]\n]\n")),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"cutPolygonByGrid(positions, holeIndices, [options]);\n")),(0,i.kt)("p",null,"Arguments:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"positions")," (Array|TypedArray) - a flat array of the vertex positions that define the polygon's rings."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"holeIndices")," (Array|TypedArray|null) - the indices in ",(0,i.kt)("inlineCode",{parentName:"li"},"positions")," where each hole starts. If ",(0,i.kt)("inlineCode",{parentName:"li"},"null"),", the polygon has no holes."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"options")," (Object, optional)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"size")," (Number) - the number of elements in each vertex. Size ",(0,i.kt)("inlineCode",{parentName:"li"},"2")," will interpret ",(0,i.kt)("inlineCode",{parentName:"li"},"positions")," as ",(0,i.kt)("inlineCode",{parentName:"li"},"[x0, y0, x1, y1, ...]")," and size ",(0,i.kt)("inlineCode",{parentName:"li"},"3")," will interpret ",(0,i.kt)("inlineCode",{parentName:"li"},"positions")," as ",(0,i.kt)("inlineCode",{parentName:"li"},"[x0, y0, z0, x1, y1, z1, ...]"),". Default ",(0,i.kt)("inlineCode",{parentName:"li"},"2"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"gridResolution")," (Number, optional) - the grid size. Default ",(0,i.kt)("inlineCode",{parentName:"li"},"10"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"gridOffset")," (Array, optional) - the grid offset in ",(0,i.kt)("inlineCode",{parentName:"li"},"[x, y]"),". Default ",(0,i.kt)("inlineCode",{parentName:"li"},"[0, 0]")," i.e. the grid starts from the coordinate origin."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"edgeTypes")," (Boolean) - if ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),', returns an additional array for each polygon that describes the nature of each vertex. See "returns" below.')))),(0,i.kt)("p",null,"Returns:"),(0,i.kt)("p",null,"An array of polygons. Each polygons is represented by an object with the following fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"positions")," (Array|TypedArray) - a flat array of the vertex positions that define the polygon's rings.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"holeIndices")," (Array|TypedArray) - the indices in ",(0,i.kt)("inlineCode",{parentName:"p"},"positions")," where each hole starts. Not present if the polygon has no holes.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"edgeTypes")," (Array) - describes the nature of each vertex in ",(0,i.kt)("inlineCode",{parentName:"p"},"positions"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0")," - the segment connecting this vertex to the next is inside the original polygon"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1")," - the segment connecting this vertex to the next is on the border of the original polygon")))))}d.isMDXComponent=!0}}]);