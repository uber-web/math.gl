"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[9298],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>y});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=i.createContext({}),s=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return i.createElement(p.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,y=d["".concat(p,".").concat(m)]||d[m]||c[m]||o;return n?i.createElement(y,l(l({ref:t},u),{},{components:n})):i.createElement(y,l({ref:t},u))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var a={};for(var p in t)hasOwnProperty.call(t,p)&&(a[p]=t[p]);a.originalType=e,a[d]="string"==typeof e?e:r,l[1]=a;for(var s=2;s<o;s++)l[s]=n[s];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4906:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>a,toc:()=>s});var i=n(7462),r=(n(7294),n(3905));const o={},l="cutPolylineByGrid",a={unversionedId:"modules/polygon/api-reference/cut-polyline-by-grid",id:"modules/polygon/api-reference/cut-polyline-by-grid",title:"cutPolylineByGrid",description:"Subdivides a polyline by intersecting with a uniform grid.",source:"@site/../docs/modules/polygon/api-reference/cut-polyline-by-grid.md",sourceDirName:"modules/polygon/api-reference",slug:"/modules/polygon/api-reference/cut-polyline-by-grid",permalink:"/math.gl/docs/modules/polygon/api-reference/cut-polyline-by-grid",draft:!1,editUrl:"https://github.com/uber-web/math.gl/tree/master/website/../docs/modules/polygon/api-reference/cut-polyline-by-grid.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"cutPolygonByGrid",permalink:"/math.gl/docs/modules/polygon/api-reference/cut-polygon-by-grid"},next:{title:"cutPolygonByMercatorBounds",permalink:"/math.gl/docs/modules/polygon/api-reference/cut-polygon-by-mercator-bounds"}},p={},s=[{value:"Usage",id:"usage",level:2}],u={toc:s},d="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"cutpolylinebygrid"},"cutPolylineByGrid"),(0,r.kt)("p",{class:"badges"},(0,r.kt)("img",{src:"https://img.shields.io/badge/From-v3.2-blue.svg?style=flat-square",alt:"From-v3.2"})),(0,r.kt)("p",null,"Subdivides a polyline by intersecting with a uniform grid."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {cutPolylineByGrid} from '@math.gl/polygon';\n\ncutPolylineByGrid([-10, -10, 10, 10, 30, -10], {size: 2, gridResolution: 10});\n// returns [-10, -10, 0, 0, 10, 10, 20, 0, 30, -10]\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"cutPolylineByGrid(positions, [options]);\n")),(0,r.kt)("p",null,"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"positions")," (Array|TypedArray) - a flat array of the vertex positions that define the polyline."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"options")," (Object, optional)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"size")," (Number) - the number of elements in each vertex. Size ",(0,r.kt)("inlineCode",{parentName:"li"},"2")," will interpret ",(0,r.kt)("inlineCode",{parentName:"li"},"positions")," as ",(0,r.kt)("inlineCode",{parentName:"li"},"[x0, y0, x1, y1, ...]")," and size ",(0,r.kt)("inlineCode",{parentName:"li"},"3")," will interpret ",(0,r.kt)("inlineCode",{parentName:"li"},"positions")," as ",(0,r.kt)("inlineCode",{parentName:"li"},"[x0, y0, z0, x1, y1, z1, ...]"),". Default ",(0,r.kt)("inlineCode",{parentName:"li"},"2"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"startIndex")," (Number, optional) - the index in ",(0,r.kt)("inlineCode",{parentName:"li"},"positions")," to start reading vertices. Default ",(0,r.kt)("inlineCode",{parentName:"li"},"0"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"endIndex")," (Number, optional) - the index in ",(0,r.kt)("inlineCode",{parentName:"li"},"positions")," to stop reading vertices. Default ",(0,r.kt)("inlineCode",{parentName:"li"},"positions.length"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"gridResolution")," (Number, optional) - the grid size. Default ",(0,r.kt)("inlineCode",{parentName:"li"},"10"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"gridOffset")," (Array, optional) - the grid offset in ",(0,r.kt)("inlineCode",{parentName:"li"},"[x, y]"),". Default ",(0,r.kt)("inlineCode",{parentName:"li"},"[0, 0]")," i.e. the grid starts from the coordinate origin."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"broken")," (Boolean, optional) - if ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),", the polyline is broken into multiple polylines at the subdivision points. If ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),", subdivision points are inserted into the original polyline. Default ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),".")))),(0,r.kt)("p",null,"Returns:"),(0,r.kt)("p",null,"A polyline or an array of polylines, depending on the ",(0,r.kt)("inlineCode",{parentName:"p"},"broken")," option. Each polyline is represented by a positions array that uses the same vertex size as the input."))}c.isMDXComponent=!0}}]);