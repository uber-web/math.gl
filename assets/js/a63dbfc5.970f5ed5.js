"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[6367],{4137:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var l=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,l)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,l,i=function(e,n){if(null==e)return{};var t,l,i={},r=Object.keys(e);for(l=0;l<r.length;l++)t=r[l],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)t=r[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var a=l.createContext({}),s=function(e){var n=l.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return l.createElement(a.Provider,{value:n},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},d=l.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,a=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),m=s(t),d=i,h=m["".concat(a,".").concat(d)]||m[d]||p[d]||r;return t?l.createElement(h,o(o({ref:n},c),{},{components:t})):l.createElement(h,o({ref:n},c))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=d;var u={};for(var a in n)hasOwnProperty.call(n,a)&&(u[a]=n[a]);u.originalType=e,u[m]="string"==typeof e?e:i,o[1]=u;for(var s=2;s<r;s++)o[s]=t[s];return l.createElement.apply(null,o)}return l.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7495:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>u,toc:()=>s});var l=t(7462),i=(t(7294),t(4137));const r={},o="CullingVolume",u={unversionedId:"modules/culling/api-reference/culling-volume",id:"modules/culling/api-reference/culling-volume",title:"CullingVolume",description:"A culling volume defined by planes.",source:"@site/../docs/modules/culling/api-reference/culling-volume.md",sourceDirName:"modules/culling/api-reference",slug:"/modules/culling/api-reference/culling-volume",permalink:"/math.gl/docs/modules/culling/api-reference/culling-volume",draft:!1,editUrl:"https://github.com/uber-web/math.gl/tree/master/website/../docs/modules/culling/api-reference/culling-volume.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"BoundingVolume (Interface)",permalink:"/math.gl/docs/modules/culling/api-reference/bounding-volume"},next:{title:"OrientedBoundingBox",permalink:"/math.gl/docs/modules/culling/api-reference/oriented-bounding-box"}},a={},s=[{value:"Static Members",id:"static-members",level:2},{value:"CullingVolume.MASK_OUTSIDE",id:"cullingvolumemask_outside",level:3},{value:"CullingVolume.MASK_INSIDE",id:"cullingvolumemask_inside",level:3},{value:"CullingVolume.MASK_INDETERMINATE",id:"cullingvolumemask_indeterminate",level:3},{value:"Methods",id:"methods",level:2},{value:"constructor([planes : Plane[]])",id:"constructorplanes--plane",level:3},{value:"fromBoundingSphere(boundingSphere : BoundingSphere)",id:"fromboundingsphereboundingsphere--boundingsphere",level:3},{value:"computeVisibility(boundingVolume : Object) : Interset",id:"computevisibilityboundingvolume--object--interset",level:3},{value:"computeVisibilityWithPlaneMask(boundingVolume : Object, parentPlaneMask : Number) : Number",id:"computevisibilitywithplanemaskboundingvolume--object-parentplanemask--number--number",level:3},{value:"Attribution",id:"attribution",level:2}],c={toc:s},m="wrapper";function p(e){let{components:n,...t}=e;return(0,i.kt)(m,(0,l.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"cullingvolume"},"CullingVolume"),(0,i.kt)("p",null,"A culling volume defined by planes."),(0,i.kt)("h2",{id:"static-members"},"Static Members"),(0,i.kt)("h3",{id:"cullingvolumemask_outside"},"CullingVolume.MASK_OUTSIDE"),(0,i.kt)("p",null,"For plane masks (as used in ",(0,i.kt)("inlineCode",{parentName:"p"},"CullingVolume#computeVisibilityWithPlaneMask"),"), this special value represents the case where the object bounding volume is entirely outside the culling volume."),(0,i.kt)("h3",{id:"cullingvolumemask_inside"},"CullingVolume.MASK_INSIDE"),(0,i.kt)("p",null,"For plane masks (as used in ",(0,i.kt)("inlineCode",{parentName:"p"},"CullingVolume.computeVisibilityWithPlaneMask"),"), this value represents the case where the object bounding volume is entirely inside the culling volume."),(0,i.kt)("h3",{id:"cullingvolumemask_indeterminate"},"CullingVolume.MASK_INDETERMINATE"),(0,i.kt)("p",null,"For plane masks (as used in",(0,i.kt)("inlineCode",{parentName:"p"},"CullingVolume.computeVisibilityWithPlaneMask"),"), this value represents the case where the object bounding volume (may) intersect all planes of the culling volume."),(0,i.kt)("h2",{id:"methods"},"Methods"),(0,i.kt)("h3",{id:"constructorplanes--plane"},"constructor([planes : Plane[]])"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"planes"),"=",(0,i.kt)("inlineCode",{parentName:"li"},"[]")," An array of clipping planes.")),(0,i.kt)("p",null,"Each plane is represented by a Cartesian4 object, where the x, y, and z components define the unit vector normal to the plane, and the w component is the distance of the plane from the origin."),(0,i.kt)("h3",{id:"fromboundingsphereboundingsphere--boundingsphere"},"fromBoundingSphere(boundingSphere : BoundingSphere)"),(0,i.kt)("p",null,"Constructs a culling volume from a bounding sphere. Creates six planes that create a box containing the sphere. The planes are aligned to the x, y, and z axes in world coordinates."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"boundingSphere")," The bounding sphere used to create the culling volume.")),(0,i.kt)("h3",{id:"computevisibilityboundingvolume--object--interset"},"computeVisibility(boundingVolume : Object) : Interset"),(0,i.kt)("p",null,"Determines whether a bounding volume intersects the culling volume."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"boundingVolume")," The bounding volume whose intersection with the culling volume is to be tested.")),(0,i.kt)("p",null,"Returns"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"INTERSECTION.OUTSIDE"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"INTERSECTION.INTERSECTING"),", or ",(0,i.kt)("inlineCode",{parentName:"li"},"INTERSECTION.INSIDE"),".")),(0,i.kt)("h3",{id:"computevisibilitywithplanemaskboundingvolume--object-parentplanemask--number--number"},"computeVisibilityWithPlaneMask(boundingVolume : Object, parentPlaneMask : Number) : Number"),(0,i.kt)("p",null,"Determines whether a bounding volume intersects the culling volume."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"boundingVolume")," The bounding volume whose intersection with the culling volume is to be tested."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"parentPlaneMask")," A bit mask from the boundingVolume's parent's check against the same culling volume, such that if ",(0,i.kt)("inlineCode",{parentName:"li"},"planeMask & (1 << planeIndex) === 0"),", for ",(0,i.kt)("inlineCode",{parentName:"li"},"k < 31"),", then the parent (and therefore this) volume is completely inside ",(0,i.kt)("inlineCode",{parentName:"li"},"plane[planeIndex]")," and that plane check can be skipped.")),(0,i.kt)("p",null,"Returns"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A plane mask as described above (which can be applied to this boundingVolume's children).")),(0,i.kt)("h2",{id:"attribution"},"Attribution"),(0,i.kt)("p",null,"This class was ported from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/AnalyticalGraphicsInc/cesium"},"Cesium")," under the Apache 2 License."))}p.isMDXComponent=!0}}]);