"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[4548],{4137:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>N});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=d(n),s=r,N=u["".concat(p,".").concat(s)]||u[s]||k[s]||l;return n?a.createElement(N,i(i({ref:t},m),{},{components:n})):a.createElement(N,i({ref:t},m))}));function N(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=s;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[u]="string"==typeof e?e:r,i[1]=o;for(var d=2;d<l;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},3613:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>k,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var a=n(7462),r=(n(7294),n(4137));const l={},i="WebMercatorViewport",o={unversionedId:"modules/web-mercator/api-reference/web-mercator-viewport",id:"modules/web-mercator/api-reference/web-mercator-viewport",title:"WebMercatorViewport",description:"The WebMercatorViewport class takes map camera states (latitude, longitude, zoom, pitch, bearing etc.),",source:"@site/../docs/modules/web-mercator/api-reference/web-mercator-viewport.md",sourceDirName:"modules/web-mercator/api-reference",slug:"/modules/web-mercator/api-reference/web-mercator-viewport",permalink:"/math.gl/docs/modules/web-mercator/api-reference/web-mercator-viewport",draft:!1,editUrl:"https://github.com/uber-web/math.gl/tree/master/website/../docs/modules/web-mercator/api-reference/web-mercator-viewport.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Web Mercator Utility Functions",permalink:"/math.gl/docs/modules/web-mercator/api-reference/web-mercator-utils"},next:{title:"Overview",permalink:"/math.gl/docs/modules/geohash/"}},p={},d=[{value:"Constructor",id:"constructor",level:2},{value:"Methods",id:"methods",level:2},{value:"<code>project(lngLatZ, options)</code>",id:"projectlnglatz-options",level:5},{value:"<code>unproject(xyz, options)</code>",id:"unprojectxyz-options",level:5},{value:"<code>projectFlat(lngLat, scale)</code>",id:"projectflatlnglat-scale",level:5},{value:"<code>unprojectFlat(xy, scale)</code>",id:"unprojectflatxy-scale",level:5},{value:"<code>getBounds(options)</code>",id:"getboundsoptions",level:5},{value:"<code>getBoundingRegion(options)</code>",id:"getboundingregionoptions",level:5},{value:"<code>fitBounds(bounds, options: object)</code>",id:"fitboundsbounds-options-object",level:5},{value:"<code>getMapCenterByLngLatPosition(options: object): [number, number]</code>",id:"getmapcenterbylnglatpositionoptions-object-number-number",level:5}],m={toc:d},u="wrapper";function k(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"webmercatorviewport"},"WebMercatorViewport"),(0,r.kt)("p",{class:"badges"},(0,r.kt)("img",{src:"https://img.shields.io/badge/From-v3.1-blue.svg?style=flat-square",alt:"From-v3.1"})),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"WebMercatorViewport")," class takes map camera states (",(0,r.kt)("inlineCode",{parentName:"p"},"latitude"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"longitude"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"zoom"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"pitch"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"bearing")," etc.),\nand performs projections between world and screen coordinates."),(0,r.kt)("h2",{id:"constructor"},"Constructor"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"width")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1")),(0,r.kt)("td",{parentName:"tr",align:null},"Width of viewport")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"height")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1")),(0,r.kt)("td",{parentName:"tr",align:null},"Height of viewport")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"latitude")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0")),(0,r.kt)("td",{parentName:"tr",align:null},"Latitude of viewport center")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"longitude")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0")),(0,r.kt)("td",{parentName:"tr",align:null},"Longitude of viewport center")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"zoom")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"11")),(0,r.kt)("td",{parentName:"tr",align:null},"Map zoom (scale is calculated as ",(0,r.kt)("inlineCode",{parentName:"td"},"2^zoom"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"pitch")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0")),(0,r.kt)("td",{parentName:"tr",align:null},"The pitch (tilt) of the map from the screen, in degrees (0 is straight down)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bearing")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0")),(0,r.kt)("td",{parentName:"tr",align:null},"The bearing (rotation) of the map from north, in degrees counter-clockwise (0 means north is up)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"fovy")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"see below")),(0,r.kt)("td",{parentName:"tr",align:null},"Field of view of camera in degrees")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"altitude")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"see below")),(0,r.kt)("td",{parentName:"tr",align:null},"Altitude of camera in screen units")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"position")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number[]")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},"Offset of the camera, in meters")))),(0,r.kt)("p",null,"Remarks:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If either ",(0,r.kt)("inlineCode",{parentName:"li"},"altitude")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"fovy")," is not provided, the missing value is computed from the other using ",(0,r.kt)("inlineCode",{parentName:"li"},"altitudeToFovy()"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"fovyToAltitude()"),"."),(0,r.kt)("li",{parentName:"ul"},"Altitude has a default value that matches assumptions in mapbox-gl. It is only used if both ",(0,r.kt)("inlineCode",{parentName:"li"},"altitude")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"fovy")," are not supplied."),(0,r.kt)("li",{parentName:"ul"},"Field of view is independent from altitude, provide ",(0,r.kt)("inlineCode",{parentName:"li"},"altitudeToFovy(1.5)")," (default value) to match assumptions in mapbox-gl"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"width")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"height")," are forced to 1 if supplied as 0, to avoid\ndivision by zero. This is intended to reduce the burden of apps to\nto check values before instantiating a ",(0,r.kt)("inlineCode",{parentName:"li"},"Viewport"),"."),(0,r.kt)("li",{parentName:"ul"},"When using Mercator projection, per cartographic tradition, longitudes and\nlatitudes are specified as degrees.")),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h5",{id:"projectlnglatz-options"},(0,r.kt)("inlineCode",{parentName:"h5"},"project(lngLatZ, options)")),(0,r.kt)("p",null,"Projects latitude and longitude to pixel coordinates on screen."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"lngLatZ")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Array")),(0,r.kt)("td",{parentName:"tr",align:null},"(required)"),(0,r.kt)("td",{parentName:"tr",align:null},"map coordinates, ",(0,r.kt)("inlineCode",{parentName:"td"},"[lng, lat]")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"[lng, lat, Z]")," where ",(0,r.kt)("inlineCode",{parentName:"td"},"Z")," is elevation in meters")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"options")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Object")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"{}")),(0,r.kt)("td",{parentName:"tr",align:null},"named options")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"options.topLeft")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Boolean")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:null},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"true")," projected coords are top left, otherwise bottom left")))),(0,r.kt)("p",null,"Returns: ",(0,r.kt)("inlineCode",{parentName:"p"},"[x, y]")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"[x, y, z]")," in pixels coordinates. ",(0,r.kt)("inlineCode",{parentName:"p"},"z")," is pixel depth."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If input is ",(0,r.kt)("inlineCode",{parentName:"li"},"[lng, lat]"),": returns ",(0,r.kt)("inlineCode",{parentName:"li"},"[x, y]"),"."),(0,r.kt)("li",{parentName:"ul"},"If input is ",(0,r.kt)("inlineCode",{parentName:"li"},"[lng, lat, Z]"),": returns ",(0,r.kt)("inlineCode",{parentName:"li"},"[x, y, z]"),".")),(0,r.kt)("p",null,"Remarks:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"By default, returns top-left coordinates suitable for canvas/SVG type\nrendering.")),(0,r.kt)("h5",{id:"unprojectxyz-options"},(0,r.kt)("inlineCode",{parentName:"h5"},"unproject(xyz, options)")),(0,r.kt)("p",null,"Unproject pixel coordinates on screen to longitude and latitude on map."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"xyz")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Array")),(0,r.kt)("td",{parentName:"tr",align:null},"(required)"),(0,r.kt)("td",{parentName:"tr",align:null},"pixel coordinates, ",(0,r.kt)("inlineCode",{parentName:"td"},"[x, y]")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"[x, y, z]")," where ",(0,r.kt)("inlineCode",{parentName:"td"},"z")," is pixel depth")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"options")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Object")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"{}")),(0,r.kt)("td",{parentName:"tr",align:null},"named options")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"options.topLeft")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Boolean")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:null},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"true")," projected coords are top left, otherwise bottom left")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"options.targetZ")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0")),(0,r.kt)("td",{parentName:"tr",align:null},"If pixel depth ",(0,r.kt)("inlineCode",{parentName:"td"},"z")," is not specified in ",(0,r.kt)("inlineCode",{parentName:"td"},"xyz"),", use ",(0,r.kt)("inlineCode",{parentName:"td"},"options.targetZ")," as the desired elevation")))),(0,r.kt)("p",null,"Returns: ",(0,r.kt)("inlineCode",{parentName:"p"},"[lng, lat]")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"[longitude, lat, Z]")," in map coordinates. ",(0,r.kt)("inlineCode",{parentName:"p"},"Z")," is elevation in meters."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If input is ",(0,r.kt)("inlineCode",{parentName:"li"},"[x, y]")," without specifying ",(0,r.kt)("inlineCode",{parentName:"li"},"options.targetZ"),": returns ",(0,r.kt)("inlineCode",{parentName:"li"},"[lng, lat]"),"."),(0,r.kt)("li",{parentName:"ul"},"If input is ",(0,r.kt)("inlineCode",{parentName:"li"},"[x, y]")," with ",(0,r.kt)("inlineCode",{parentName:"li"},"options.targetZ"),": returns ",(0,r.kt)("inlineCode",{parentName:"li"},"[lng, lat, targetZ]"),"."),(0,r.kt)("li",{parentName:"ul"},"If input is ",(0,r.kt)("inlineCode",{parentName:"li"},"[x, y, z]"),": returns ",(0,r.kt)("inlineCode",{parentName:"li"},"[lng, lat, Z]"),".")),(0,r.kt)("h5",{id:"projectflatlnglat-scale"},(0,r.kt)("inlineCode",{parentName:"h5"},"projectFlat(lngLat, scale)")),(0,r.kt)("p",null,"Project longitude and latitude onto Web Mercator coordinates."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"lngLat")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Array")),(0,r.kt)("td",{parentName:"tr",align:null},"(required)"),(0,r.kt)("td",{parentName:"tr",align:null},"map coordinates, ",(0,r.kt)("inlineCode",{parentName:"td"},"[lng, lat]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"scale")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"this.scale")),(0,r.kt)("td",{parentName:"tr",align:null},"Web Mercator scale")))),(0,r.kt)("p",null,"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[x, y]"),", representing Web Mercator coordinates.")),(0,r.kt)("h5",{id:"unprojectflatxy-scale"},(0,r.kt)("inlineCode",{parentName:"h5"},"unprojectFlat(xy, scale)")),(0,r.kt)("p",null,"Unprojects a Web Mercator coordinate to longitude and latitude."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"xy")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Array")),(0,r.kt)("td",{parentName:"tr",align:null},"(required)"),(0,r.kt)("td",{parentName:"tr",align:null},"Web Mercator coordinates, ",(0,r.kt)("inlineCode",{parentName:"td"},"[x, y]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"scale")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"this.scale")),(0,r.kt)("td",{parentName:"tr",align:null},"Web Mercator scale")))),(0,r.kt)("p",null,"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[longitude, latitude]"))),(0,r.kt)("h5",{id:"getboundsoptions"},(0,r.kt)("inlineCode",{parentName:"h5"},"getBounds(options)")),(0,r.kt)("p",null,"Get the axis-aligned bounding box of the current visible area."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"options.z")," (number, optional) - To calculate a bounding volume for fetching 3D data, this option can be used to get the bounding box at a specific elevation. Default ",(0,r.kt)("inlineCode",{parentName:"li"},"0"),".")),(0,r.kt)("p",null,"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[[lon, lat], [lon, lat]]")," as the south west and north east corners of the smallest orthogonal bounds that encompasses the visible region.")),(0,r.kt)("h5",{id:"getboundingregionoptions"},(0,r.kt)("inlineCode",{parentName:"h5"},"getBoundingRegion(options)")),(0,r.kt)("p",null,"Get the vertices of the current visible region."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"options.z")," (number, optional) - To calculate a bounding volume for fetching 3D data, this option can be used to get the bounding region at a specific elevation. Default ",(0,r.kt)("inlineCode",{parentName:"li"},"0"),".")),(0,r.kt)("p",null,"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"An array of 4 corners in ",(0,r.kt)("inlineCode",{parentName:"li"},"[longitude, latitude, altitude]")," that define the visible region.")),(0,r.kt)("h5",{id:"fitboundsbounds-options-object"},(0,r.kt)("inlineCode",{parentName:"h5"},"fitBounds(bounds, options: object)")),(0,r.kt)("p",null,"Get a new flat viewport that fits around the given bounding box."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"bounds")," ([","[number,number]",",","[number,number]","]) - an array of two opposite corners of\nthe bounding box. Each corner is specified in ",(0,r.kt)("inlineCode",{parentName:"li"},"[lon, lat]"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"options.padding")," (number|{top:number, bottom: number, left: number, right: number}, optional) - The amount of\npadding in pixels to add to the given bounds from the edge of the viewport. If padding is set as object, all parameters are\nrequired."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"options.offset")," (","[number,number]",", optional) - The center of the given bounds relative to the viewport's center, ",(0,r.kt)("inlineCode",{parentName:"li"},"[x, y]")," measured in pixels."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"opts.minExtent")," (number, optional) - If supplied, the bounds used to calculate the new map settings will be expanded if the delta width or height of the supplied ",(0,r.kt)("inlineCode",{parentName:"li"},"bounds")," is smaller than this value."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"opts.maxZoom"),"=",(0,r.kt)("inlineCode",{parentName:"li"},"24")," (number, optional) - The returned zoom value will be capped to this value. Avoids returning infinite ",(0,r.kt)("inlineCode",{parentName:"li"},"zoom")," when the supplied ",(0,r.kt)("inlineCode",{parentName:"li"},"bounds")," have zero width or height deltas.")),(0,r.kt)("p",null,"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A new ",(0,r.kt)("inlineCode",{parentName:"li"},"WebMercatorViewport")," instance")),(0,r.kt)("h5",{id:"getmapcenterbylnglatpositionoptions-object-number-number"},(0,r.kt)("inlineCode",{parentName:"h5"},"getMapCenterByLngLatPosition(options: object): [number, number]")),(0,r.kt)("p",null,"Get the map center that place a given ","[lng, lat]"," coordinate at screen point ","[x, y]","."),(0,r.kt)("p",null,"Parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"options.lngLat")," (Array, required) - ","[lng,lat]"," coordinates of a location on the sphere."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"options.pos")," (Array, required) - ","[x,y]"," coordinates of a pixel on screen.")),(0,r.kt)("p",null,"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[longitude, latitude]")," as the new map center")))}k.isMDXComponent=!0}}]);