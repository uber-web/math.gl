"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[2688],{4137:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>g});var i=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},l=Object.keys(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=i.createContext({}),d=function(e){var n=i.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=d(e.components);return i.createElement(u.Provider,{value:n},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},p=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,l=e.originalType,u=e.parentName,s=r(e,["components","mdxType","originalType","parentName"]),m=d(t),p=o,g=m["".concat(u,".").concat(p)]||m[p]||c[p]||l;return t?i.createElement(g,a(a({ref:n},s),{},{components:t})):i.createElement(g,a({ref:n},s))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var l=t.length,a=new Array(l);a[0]=p;var r={};for(var u in n)hasOwnProperty.call(n,u)&&(r[u]=n[u]);r.originalType=e,r[m]="string"==typeof e?e:o,a[1]=r;for(var d=2;d<l;d++)a[d]=t[d];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}p.displayName="MDXCreateElement"},1408:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>a,default:()=>c,frontMatter:()=>l,metadata:()=>r,toc:()=>d});var i=t(7462),o=(t(7294),t(4137));const l={},a="AxisAlignedBoundingBox",r={unversionedId:"modules/culling/api-reference/axis-aligned-bounding-box",id:"modules/culling/api-reference/axis-aligned-bounding-box",title:"AxisAlignedBoundingBox",description:"An AxisAlignedBoundingBox is a closed and convex cuboid that is aligned with the orthogonal axes.",source:"@site/../docs/modules/culling/api-reference/axis-aligned-bounding-box.md",sourceDirName:"modules/culling/api-reference",slug:"/modules/culling/api-reference/axis-aligned-bounding-box",permalink:"/math.gl/docs/modules/culling/api-reference/axis-aligned-bounding-box",draft:!1,editUrl:"https://github.com/uber-web/math.gl/tree/master/website/../docs/modules/culling/api-reference/axis-aligned-bounding-box.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/math.gl/docs/modules/culling/"},next:{title:"BoundingSphere",permalink:"/math.gl/docs/modules/culling/api-reference/bounding-sphere"}},u={},d=[{value:"Inheritance",id:"inheritance",level:2},{value:"Global Functions",id:"global-functions",level:2},{value:"makeAxisAlignedBoundingBoxFromPoints(positions : Array3, result? : AxisAlignedBoundingBox) : AxisAlignedBoundingBox",id:"makeaxisalignedboundingboxfrompointspositions--array3-result--axisalignedboundingbox--axisalignedboundingbox",level:3},{value:"Fields",id:"fields",level:2},{value:"center: Vector3 = 0, 0, 0",id:"center-vector3--0-0-0",level:3},{value:"halfDiagonal: Vector3",id:"halfdiagonal-vector3",level:3},{value:"minimum: Vector3",id:"minimum-vector3",level:3},{value:"maximum: Vector3",id:"maximum-vector3",level:3},{value:"Methods",id:"methods",level:2},{value:"constructor(minimum = 0, 0, 0, maximum = 0, 0, 0) {",id:"constructorminimum--0-0-0-maximum--0-0-0-",level:3},{value:"constructor",id:"constructor",level:3},{value:"clone() : AxisAlignedBoundingBox",id:"clone--axisalignedboundingbox",level:3},{value:"equals(right : AxisAlignedBoundingBox) : Boolean",id:"equalsright--axisalignedboundingbox--boolean",level:3},{value:"intersectPlane(plane : Plane) : INTERSECTION",id:"intersectplaneplane--plane--intersection",level:3},{value:"distanceTo(point : Number3) : Number",id:"distancetopoint--number3--number",level:3},{value:"distanceSquaredTo(point : Number3) : Number",id:"distancesquaredtopoint--number3--number",level:3}],s={toc:d},m="wrapper";function c(e){let{components:n,...t}=e;return(0,o.kt)(m,(0,i.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"axisalignedboundingbox"},"AxisAlignedBoundingBox"),(0,o.kt)("p",null,"An ",(0,o.kt)("inlineCode",{parentName:"p"},"AxisAlignedBoundingBox")," is a closed and convex cuboid that is aligned with the orthogonal axes."),(0,o.kt)("h1",{id:"usage"},"Usage"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"AxisAlignedBoundingBox")," can be created using two corners of the box:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import {AxisAlignedBoundingBox} from '@math.gl/culling';\n\nconst box = new AxisAlignedBoundingBox([-1, -1, -1], [1, 1, 1]);\n")),(0,o.kt)("p",null,"Or from a collection of points:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import {makeAxisAlignedBoundingBoxFromPoints} from '@math.gl/culling';\n\nconst box = makeAxisAlignedBoundingBoxFromPoints([\n  [2, 0, 0],\n  [-2, 0, 0]\n]);\n")),(0,o.kt)("h2",{id:"inheritance"},"Inheritance"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"class AxisAlignedBoundingBox implements")," ",(0,o.kt)("a",{parentName:"p",href:"./bounding-volume"},(0,o.kt)("inlineCode",{parentName:"a"},"BoundingVolume")),"."),(0,o.kt)("h2",{id:"global-functions"},"Global Functions"),(0,o.kt)("h3",{id:"makeaxisalignedboundingboxfrompointspositions--array3-result--axisalignedboundingbox--axisalignedboundingbox"},"makeAxisAlignedBoundingBoxFromPoints(positions : Array","[3][]",", result? : AxisAlignedBoundingBox) : AxisAlignedBoundingBox"),(0,o.kt)("p",null,"Computes an instance of an ",(0,o.kt)("inlineCode",{parentName:"p"},"AxisAlignedBoundingBox")," of the given positions."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"positions")," List of ",(0,o.kt)("inlineCode",{parentName:"li"},"Vector3")," points that the bounding box will enclose."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"result")," Optional object onto which to store the result.")),(0,o.kt)("h2",{id:"fields"},"Fields"),(0,o.kt)("h3",{id:"center-vector3--0-0-0"},"center: Vector3 = ","[0, 0, 0]"),(0,o.kt)("p",null,"The center position of the box."),(0,o.kt)("h3",{id:"halfdiagonal-vector3"},"halfDiagonal: Vector3"),(0,o.kt)("p",null,"The positive diagonal vector."),(0,o.kt)("h3",{id:"minimum-vector3"},"minimum: Vector3"),(0,o.kt)("p",null,"The minimum corner of the bounding box."),(0,o.kt)("h3",{id:"maximum-vector3"},"maximum: Vector3"),(0,o.kt)("p",null,"The maximum corner of the bounding box."),(0,o.kt)("h2",{id:"methods"},"Methods"),(0,o.kt)("h3",{id:"constructorminimum--0-0-0-maximum--0-0-0-"},"constructor(minimum = ","[0, 0, 0]",", maximum = ","[0, 0, 0]",") {"),(0,o.kt)("h3",{id:"constructor"},"constructor"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"{Vector3} ","[minimum=Vector3.ZERO]"," The minimum corner of the box, i.e. ",(0,o.kt)("inlineCode",{parentName:"li"},"[xMin, yMin, zMin]"),"."),(0,o.kt)("li",{parentName:"ul"},"{Vector3} ","[maximum=Vector3.ZERO]"," The maximum corner of the box, i.e. ",(0,o.kt)("inlineCode",{parentName:"li"},"[xMax, yMax, zMax]"),".")),(0,o.kt)("h3",{id:"clone--axisalignedboundingbox"},"clone() : AxisAlignedBoundingBox"),(0,o.kt)("p",null,"Duplicates a ",(0,o.kt)("inlineCode",{parentName:"p"},"AxisAlignedBoundingBox")," instance."),(0,o.kt)("p",null,"Returns"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A new ",(0,o.kt)("inlineCode",{parentName:"li"},"AxisAlignedBoundingBox")," instance.")),(0,o.kt)("h3",{id:"equalsright--axisalignedboundingbox--boolean"},"equals(right : AxisAlignedBoundingBox) : Boolean"),(0,o.kt)("p",null,"Compares the provided ",(0,o.kt)("inlineCode",{parentName:"p"},"AxisAlignedBoundingBox")," componentwise and returns ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," if they are equal, ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"right")," The second ",(0,o.kt)("inlineCode",{parentName:"li"},"AxisAlignedBoundingBox"))),(0,o.kt)("p",null,"Returns"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"true")," if left and right are equal, ",(0,o.kt)("inlineCode",{parentName:"li"},"false")," otherwise.")),(0,o.kt)("h3",{id:"intersectplaneplane--plane--intersection"},"intersectPlane(plane : Plane) : INTERSECTION"),(0,o.kt)("p",null,"Determines which side of a plane the axis-aligned bounding box is located."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"plane")," The plane to test against.")),(0,o.kt)("p",null,"Returns"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"INTERSECTION.INSIDE")," if the entire box is on the side of the plane the normal is pointing"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"INTERSECTION.OUTSIDE")," if the entire box is on the opposite side, and"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"INTERSECTION.INTERSECTING")," if the box intersects the plane.")),(0,o.kt)("h3",{id:"distancetopoint--number3--number"},"distanceTo(point : Number","[3]",") : Number"),(0,o.kt)("p",null,"Computes the estimated distance from the closest point on a bounding box to a point."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"point")," The point")),(0,o.kt)("p",null,"Returns"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The estimated distance from the bounding sphere to the point.")),(0,o.kt)("h3",{id:"distancesquaredtopoint--number3--number"},"distanceSquaredTo(point : Number","[3]",") : Number"),(0,o.kt)("p",null,"Computes the estimated distance squared from the closest point on a bounding box to a point."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"point")," The point")),(0,o.kt)("p",null,"Returns"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The estimated distance squared from the bounding sphere to the point.")))}c.isMDXComponent=!0}}]);