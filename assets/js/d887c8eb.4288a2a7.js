"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[8316],{4137:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>f});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var u=r.createContext({}),p=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=p(e.components);return r.createElement(u.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,u=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),c=p(t),d=i,f=c["".concat(u,".").concat(d)]||c[d]||m[d]||o;return t?r.createElement(f,l(l({ref:n},s),{},{components:t})):r.createElement(f,l({ref:n},s))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,l=new Array(o);l[0]=d;var a={};for(var u in n)hasOwnProperty.call(n,u)&&(a[u]=n[u]);a.originalType=e,a[c]="string"==typeof e?e:i,l[1]=a;for(var p=2;p<o;p++)l[p]=t[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6613:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>p});var r=t(7462),i=(t(7294),t(4137));const o={},l="BoundingVolume (Interface)",a={unversionedId:"modules/culling/api-reference/bounding-volume",id:"modules/culling/api-reference/bounding-volume",title:"BoundingVolume (Interface)",description:"An interface defining common operations for bounding volumes (i.e. BoundingSphere, AxisAlignedBoundingBox, OrientedBoundingBox).",source:"@site/../docs/modules/culling/api-reference/bounding-volume.md",sourceDirName:"modules/culling/api-reference",slug:"/modules/culling/api-reference/bounding-volume",permalink:"/math.gl/docs/modules/culling/api-reference/bounding-volume",draft:!1,editUrl:"https://github.com/uber-web/math.gl/tree/master/website/../docs/modules/culling/api-reference/bounding-volume.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"BoundingSphere",permalink:"/math.gl/docs/modules/culling/api-reference/bounding-sphere"},next:{title:"CullingVolume",permalink:"/math.gl/docs/modules/culling/api-reference/culling-volume"}},u={},p=[{value:"Global Functions",id:"global-functions",level:2},{value:"Members",id:"members",level:2},{value:"intersectPlane(plane : Plane) : INTERSECTION",id:"intersectplaneplane--plane--intersection",level:3},{value:"transform(transform : Number16) : BoundingSphere",id:"transformtransform--number16--boundingsphere",level:3},{value:"distanceSquaredTo(point) : Number",id:"distancesquaredtopoint--number",level:3},{value:"Attribution",id:"attribution",level:2}],s={toc:p},c="wrapper";function m(e){let{components:n,...t}=e;return(0,i.kt)(c,(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"boundingvolume-interface"},"BoundingVolume (Interface)"),(0,i.kt)("p",null,"An interface defining common operations for bounding volumes (i.e. ",(0,i.kt)("inlineCode",{parentName:"p"},"BoundingSphere"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"AxisAlignedBoundingBox"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"OrientedBoundingBox"),")."),(0,i.kt)("h2",{id:"global-functions"},"Global Functions"),(0,i.kt)("h2",{id:"members"},"Members"),(0,i.kt)("h3",{id:"intersectplaneplane--plane--intersection"},"intersectPlane(plane : Plane) : INTERSECTION"),(0,i.kt)("p",null,"Determines which side of a plane a sphere is located."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"plane")," The plane to test against.\nReturns"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"INTERSECTION.INSIDE")," if the entire sphere is on the side of the plane the normal is pointing"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"INTERSECTION.OUTSIDE")," if the entire sphere is on the opposite side"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"INTERSECTION.INTERSECTING")," if the sphere intersects the plane.")),(0,i.kt)("h3",{id:"transformtransform--number16--boundingsphere"},"transform(transform : Number","[16]",") : BoundingSphere"),(0,i.kt)("p",null,"Applies a 4x4 affine transformation matrix to a bounding sphere."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"transform")," The transformation matrix to apply to the bounding sphere.")),(0,i.kt)("h3",{id:"distancesquaredtopoint--number"},"distanceSquaredTo(point) : Number"),(0,i.kt)("p",null,"Computes the estimated distance squared from the closest point on a bounding sphere to a point."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"point")," The point")),(0,i.kt)("p",null,"Returns"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The estimated distance squared from the bounding sphere to the point.")),(0,i.kt)("h2",{id:"attribution"},"Attribution"),(0,i.kt)("p",null,"This class was ported from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/AnalyticalGraphicsInc/cesium"},"Cesium")," under the Apache 2 License."))}m.isMDXComponent=!0}}]);