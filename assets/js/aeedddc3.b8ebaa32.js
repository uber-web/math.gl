"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[7990],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>h});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var m=n.createContext({}),c=function(e){var t=n.useContext(m),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(m.Provider,{value:t},e.children)},s="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,m=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),s=c(r),u=a,h=s["".concat(m,".").concat(u)]||s[u]||d[u]||o;return r?n.createElement(h,i(i({ref:t},p),{},{components:r})):n.createElement(h,i({ref:t},p))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=u;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l[s]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},6118:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const o={},i="SphericalCoordinates",l={unversionedId:"modules/core/api-reference/spherical-coordinates",id:"modules/core/api-reference/spherical-coordinates",title:"SphericalCoordinates",description:"This documentation is incomplete and may be incorrect",source:"@site/../docs/modules/core/api-reference/spherical-coordinates.md",sourceDirName:"modules/core/api-reference",slug:"/modules/core/api-reference/spherical-coordinates",permalink:"/math.gl/docs/modules/core/api-reference/spherical-coordinates",draft:!1,editUrl:"https://github.com/uber-web/math.gl/tree/master/website/../docs/modules/core/api-reference/spherical-coordinates.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Quaternion",permalink:"/math.gl/docs/modules/core/api-reference/quaternion"},next:{title:"Math Utility Functions",permalink:"/math.gl/docs/modules/core/api-reference/utilities"}},m={},c=[{value:"Usage",id:"usage",level:2},{value:"Members",id:"members",level:2},{value:"phi",id:"phi",level:3},{value:"theta",id:"theta",level:3},{value:"radius",id:"radius",level:3},{value:"altitude",id:"altitude",level:3},{value:"lng",id:"lng",level:3},{value:"lat",id:"lat",level:3},{value:"z",id:"z",level:3},{value:"Methods",id:"methods",level:2},{value:"constructor",id:"constructor",level:3},{value:"set",id:"set",level:3},{value:"clone",id:"clone",level:3},{value:"copy",id:"copy",level:3},{value:"fromLngLatZ",id:"fromlnglatz",level:3},{value:"fromVector3",id:"fromvector3",level:3},{value:"makeSafe",id:"makesafe",level:3},{value:"toVector3",id:"tovector3",level:3},{value:"check",id:"check",level:3},{value:"Remarks",id:"remarks",level:2}],p={toc:c},s="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(s,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"sphericalcoordinates"},"SphericalCoordinates"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"This documentation is incomplete and may be incorrect")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"class SphericalCoordinates\n")),(0,a.kt)("p",null,"See also ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Spherical_coordinate_system"},"Wikipedia"),", ",(0,a.kt)("a",{parentName:"p",href:"http://mathworld.wolfram.com/SphericalCoordinates.html"},"Wolfram MathWorld"),"."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The poles (phi) are at the positive and negative y axis."),(0,a.kt)("li",{parentName:"ul"},"The equator starts at positive z.")),(0,a.kt)("p",null,"Conversion from spherical to Cartesian (rectilinear) coordinates:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'<math xmlns="http://www.w3.org/1998/Math/MathML">\n<mfenced open="{" close="">\n<mtable columnalign="left">\n  <mtr><mrow><mi>x</mi><mo>=</mo><mn>\u03c1</mn><mi>cos</mi><mn>\u03b8\u03c6</mn></mrow></mtr>\n  <mtr><mrow><mi>y</mi><mo>=</mo><mn>\u03c1</mn><mi>cos</mi><mn>\u03b8\u03c6</mn></mrow></mtr>\n  <mtr><mrow><mi>z</mi><mo>=</mo><mn>\u03c1</mn><mi>cos</mi><mn>\u03b8\u03c6</mn></mrow></mtr>\n</mtable>\n</mfenced>\n</math>\n')),(0,a.kt)("p",null,"Conversion from Cartesian (rectilinear) to spherical coordinates:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'<math xmlns="http://www.w3.org/1998/Math/MathML">\n<mfenced open="{" close="">\n<mtable columnalign="left">\n  <mtr><mrow><mi>r</mi><mo>=</mo><msqrt>\n    <msup><mi>x</mi><mn>2</mn></msup><mo>+</mo>\n    <msup><mi>y</mi><mn>2</mn></msup><mo>+</mo>\n    <msup><mi>z</mi><mn>2</mn></msup>\n  </msqrt></mrow></mtr>\n  <mtr><mrow><mi>\u03b8</mi><mo>=</mo><mo>arccos</mo><mfrac><mi>z</mi><mi>r</mi></mfrac></mrow></mtr>\n  <mtr><mrow><mi>\u03c6</mi><mo>=</mo><mo>arctan</mo><mfrac><mi>y</mi><mi>x</mi></mfrac></mrow></mtr>\n</mtable>\n</mfenced>\n</math>\n')),(0,a.kt)("p",null,"Ranges"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'<math xmlns="http://www.w3.org/1998/Math/MathML">\n<mfenced open="{" close="">\n<mtable columnalign="left">\n  <mtr><mrow><mi>r</mi><mo>\u2265<mn>0</mn></mtr>\n  <mtr><mrow><mi>\u03b8</mi><mo>\u2265<mn>0</mn></mtr>\n  <mtr><mrow><mi>\u03c6</mi><mo>\u2265<mn>0</mn></mtr>\n</mtable>\n</mfenced>\n</math>\n')),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import {SphericalCoordinates} from '@math.gl/core';\n")),(0,a.kt)("p",null,"Creating a SphericalCoordinates object"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const spherical = new SphericalCoordinates({phi: 0, theta: 0});\nconst spherical = new SphericalCoordinates({pitch: 0, bearing: 0});\nconst spherical = new SphericalCoordinates({longitude: 0, latitude: 0});\n")),(0,a.kt)("p",null,"Converting to a direction ",(0,a.kt)("inlineCode",{parentName:"p"},"Vector3")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const direction = new SphericalCoordinates().toVector3();\n")),(0,a.kt)("p",null,"Manipulating spherical coordinates;"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"spherical.bearing += 3; // Add three degrees to bearing\nspherical.theta -= Math.PI / 4; // Subtract PI/4 radians from theta.\n")),(0,a.kt)("h2",{id:"members"},"Members"),(0,a.kt)("p",null,"// Standard spherical coordinates"),(0,a.kt)("h3",{id:"phi"},"phi"),(0,a.kt)("h3",{id:"theta"},"theta"),(0,a.kt)("h3",{id:"radius"},"radius"),(0,a.kt)("h3",{id:"altitude"},"altitude"),(0,a.kt)("p",null,"// lnglatZ coordinates"),(0,a.kt)("h3",{id:"lng"},"lng"),(0,a.kt)("h3",{id:"lat"},"lat"),(0,a.kt)("h3",{id:"z"},"z"),(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("h3",{id:"constructor"},"constructor"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"SphericalCoordinates({phi = 0, theta = 0, radius = 1.0})\nSphericalCoordinates({bearing = 0, pitch = 0, altitude = 1.0})\nSphericalCoordinates({longitude = 0, latitude = 0, z = 1.0})\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"phi=0 - rotation around X (latitude)"),(0,a.kt)("li",{parentName:"ul"},"theta=0 - rotation around Y (longitude)"),(0,a.kt)("li",{parentName:"ul"},"radius=1 - Distance from center")),(0,a.kt)("h3",{id:"set"},"set"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"set(radius, phi, theta)")),(0,a.kt)("h3",{id:"clone"},"clone"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"clone()")),(0,a.kt)("h3",{id:"copy"},"copy"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"copy(other)")),(0,a.kt)("h3",{id:"fromlnglatz"},"fromLngLatZ"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"fromLngLatZ([lng, lat, z])")),(0,a.kt)("h3",{id:"fromvector3"},"fromVector3"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"fromVector3(v)")),(0,a.kt)("h3",{id:"makesafe"},"makeSafe"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"makeSafe()")),(0,a.kt)("p",null,"// restrict phi to be betwee EPS and PI-EPS"),(0,a.kt)("h3",{id:"tovector3"},"toVector3"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"toVector3(center = [0, 0, 0])")),(0,a.kt)("p",null,"// TODO - add parameter for orientation of sphere? up vector etc?"),(0,a.kt)("h3",{id:"check"},"check"),(0,a.kt)("h2",{id:"remarks"},"Remarks"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Inspired by THREE.js ",(0,a.kt)("inlineCode",{parentName:"li"},"THREE.Spherical")," class")))}d.isMDXComponent=!0}}]);