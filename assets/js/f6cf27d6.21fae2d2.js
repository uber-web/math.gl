"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[4729],{4137:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>c});var o=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,i={},l=Object.keys(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=o.createContext({}),s=function(e){var n=o.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=s(e.components);return o.createElement(p.Provider,{value:n},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},y=o.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,p=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),d=s(t),y=i,c=d["".concat(p,".").concat(y)]||d[y]||g[y]||l;return t?o.createElement(c,r(r({ref:n},u),{},{components:t})):o.createElement(c,r({ref:n},u))}));function c(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,r=new Array(l);r[0]=y;var a={};for(var p in n)hasOwnProperty.call(n,p)&&(a[p]=n[p]);a.originalType=e,a[d]="string"==typeof e?e:i,r[1]=a;for(var s=2;s<l;s++)r[s]=t[s];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}y.displayName="MDXCreateElement"},5854:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>r,default:()=>g,frontMatter:()=>l,metadata:()=>a,toc:()=>s});var o=t(7462),i=(t(7294),t(4137));const l={},r="polygon-utils",a={unversionedId:"modules/polygon/api-reference/polygon-utils",id:"modules/polygon/api-reference/polygon-utils",title:"polygon-utils",description:"A set of polygon-related utility functions. Utility functions are available for flat arrays and for arrays of points. Note: the \\*Points set of functions is used for arrays of points, and is separated for performance and backwards compatibility reasons.",source:"@site/../docs/modules/polygon/api-reference/polygon-utils.md",sourceDirName:"modules/polygon/api-reference",slug:"/modules/polygon/api-reference/polygon-utils",permalink:"/math.gl/docs/modules/polygon/api-reference/polygon-utils",draft:!1,editUrl:"https://github.com/uber-web/math.gl/tree/master/website/../docs/modules/polygon/api-reference/polygon-utils.md",tags:[],version:"current",frontMatter:{}},p={},s=[{value:"Usage",id:"usage",level:2},{value:"Types",id:"types",level:2},{value:"PolygonParams",id:"polygonparams",level:3},{value:"Functions",id:"functions",level:2},{value:"modifyPolygonWindingDirection",id:"modifypolygonwindingdirection",level:3},{value:"getPolygonSignedArea",id:"getpolygonsignedarea",level:3},{value:"getPolygonWindingDirection",id:"getpolygonwindingdirection",level:3},{value:"forEachSegmentInPolygon",id:"foreachsegmentinpolygon",level:3},{value:"modifyPolygonWindingDirectionPoints",id:"modifypolygonwindingdirectionpoints",level:3},{value:"getPolygonSignedAreaPoints",id:"getpolygonsignedareapoints",level:3},{value:"getPolygonWindingDirectionPoints",id:"getpolygonwindingdirectionpoints",level:3},{value:"forEachSegmentInPolygonPoints",id:"foreachsegmentinpolygonpoints",level:3}],u={toc:s},d="wrapper";function g(e){let{components:n,...t}=e;return(0,i.kt)(d,(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"polygon-utils"},"polygon-utils"),(0,i.kt)("p",null,"A set of polygon-related utility functions. Utility functions are available for flat arrays and for arrays of points. Note: the ","*","Points set of functions is used for arrays of points, and is separated for performance and backwards compatibility reasons."),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import {getPolygonWindingDirection} from '@math.gl/polygon';\n")),(0,i.kt)("h2",{id:"types"},"Types"),(0,i.kt)("h3",{id:"polygonparams"},"PolygonParams"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"PolygonParams")),(0,i.kt)("p",null,"Fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"start")," (number) - Start index of the polygon in the array of positions. Defaults to 0."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"end")," (number) - End index of the polygon in the array of positions. Defaults to number of positions."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"size")," (Number) - Size of a point, 2 (XZ) or 3 (XYZ). Defaults to 2. Affects only polygons stored in flat arrays."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"isClosed")," (Boolean) - Indicates that the first point of the polygon is equal to the last point, and additional checks should be ommited."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"plane")," ('xy' | 'yz' | 'xz') - The 2D projection plane on which to calculate the area of a 3D polygon. Default ",(0,i.kt)("inlineCode",{parentName:"li"},"'xy'"),".")),(0,i.kt)("h2",{id:"functions"},"Functions"),(0,i.kt)("h3",{id:"modifypolygonwindingdirection"},"modifyPolygonWindingDirection"),(0,i.kt)("p",null,"Checks winding direction of the polygon and reverses the polygon in case if opposite winding direction. Note: points are modified in-place."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"modifyPolygonWindingDirection(points, direction, params)")),(0,i.kt)("p",null,"Arguments:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"points")," (Array|TypedArray) - a flat array of the points that define the polygon."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"direction")," (Number) - Requested winding direction. A positive 1 for clockwise, -1 for counter clockwise."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"options")," (PolygonParams) - Polygon parameters.")),(0,i.kt)("p",null,"Returns:"),(0,i.kt)("p",null,"Returns true if the winding direction was changed."),(0,i.kt)("h3",{id:"getpolygonsignedarea"},"getPolygonSignedArea"),(0,i.kt)("p",null,"Returns signed area of the polygon."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"getPolygonSignedArea(points, options, plane)")),(0,i.kt)("p",null,"Arguments:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"points")," (Array|TypedArray) - a flat array of the points that define the polygon."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"options")," (PolygonParams, optional) - Polygon parameters.")),(0,i.kt)("p",null,"Returns:"),(0,i.kt)("p",null,"Signed area of the polygon."),(0,i.kt)("h3",{id:"getpolygonwindingdirection"},"getPolygonWindingDirection"),(0,i.kt)("p",null,"Returns winding direction of the polygon."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"getPolygonWindingDirection(points, options)")),(0,i.kt)("p",null,"Arguments:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"points")," (Array|TypedArray) - a flat array of the points that define the polygon."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"options")," (PolygonParams) - Polygon parameters.")),(0,i.kt)("p",null,"Returns:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A positive number is clockwise."),(0,i.kt)("li",{parentName:"ul"},"A negative number is counter clockwise.")),(0,i.kt)("h3",{id:"foreachsegmentinpolygon"},"forEachSegmentInPolygon"),(0,i.kt)("p",null,"Calls visitor callback for each segment in the polygon."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"forEachSegmentInPolygon(points, (p1x, p1y, p2x, p2y, ind1, ind2) => ...), options")),(0,i.kt)("p",null,"Arguments:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"points")," (Array[]|TypedArray[]) - a flat array of the points that define the polygon."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"visitor")," (SegmentVisitorFlat) - a callback to call for each segment of the polygon."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"options")," (PolygonParams) - Polygon parameters.")),(0,i.kt)("h3",{id:"modifypolygonwindingdirectionpoints"},"modifyPolygonWindingDirectionPoints"),(0,i.kt)("p",null,"Checks winding direction of the polygon and reverses the polygon in case if opposite winding direction. Note: points are modified in-place."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"modifyPolygonWindingDirectionPoints(points, direction, options)")),(0,i.kt)("p",null,"Arguments:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"points")," (Array[]|TypedArray[]) - an array of the points that define the polygon."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"direction")," (Number) - Requested winding direction. A positive 1 for clockwise, -1 for counter clockwise."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"options")," (PolygonParams) - Polygon parameters.")),(0,i.kt)("p",null,"Returns:"),(0,i.kt)("p",null,"Returns true if the winding direction was changed."),(0,i.kt)("h3",{id:"getpolygonsignedareapoints"},"getPolygonSignedAreaPoints"),(0,i.kt)("p",null,"Returns signed area of the polygon."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"getPolygonSignedAreaPoints(points, options)")),(0,i.kt)("p",null,"Arguments:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"points")," (Array[]|TypedArray[]) - an array of the points that define the polygon."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"options")," (PolygonParams) - Polygon parameters.")),(0,i.kt)("p",null,"Returns:"),(0,i.kt)("p",null,"Signed area of the polygon."),(0,i.kt)("h3",{id:"getpolygonwindingdirectionpoints"},"getPolygonWindingDirectionPoints"),(0,i.kt)("p",null,"Returns winding direction of the polygon."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"getPolygonWindingDirectionPoints(points, options)")),(0,i.kt)("p",null,"Arguments:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"points")," (Array[]|TypedArray[]) - an array of the points that define the polygon."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"options")," (PolygonParams) - Polygon parameters.")),(0,i.kt)("p",null,"Returns:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A positive number is clockwise."),(0,i.kt)("li",{parentName:"ul"},"A negative number is counter clockwise.")),(0,i.kt)("h3",{id:"foreachsegmentinpolygonpoints"},"forEachSegmentInPolygonPoints"),(0,i.kt)("p",null,"Calls visitor callback for each segment in the polygon."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"forEachSegmentInPolygonPoints(points, (p1, p2, ind1, ind2) => ..., options)")),(0,i.kt)("p",null,"Arguments:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"points")," (Array[]|TypedArray[]) - an array of the points that define the polygon."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"visitor")," (SegmentVisitor) - a callback to call for each segment of the polygon."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"options")," (PolygonParams) - Polygon parameters.")))}g.isMDXComponent=!0}}]);