"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[5357],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var m=r.createContext({}),s=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(m.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,m=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=s(n),d=a,h=u["".concat(m,".").concat(d)]||u[d]||c[d]||i;return n?r.createElement(h,l(l({ref:t},p),{},{components:n})):r.createElement(h,l({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var m in t)hasOwnProperty.call(t,m)&&(o[m]=t[m]);o.originalType=e,o[u]="string"==typeof e?e:a,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4325:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const i={},l="Matrix3",o={unversionedId:"modules/core/api-reference/matrix3",id:"modules/core/api-reference/matrix3",title:"Matrix3",description:"A 3x3 matrix. Any arguments can be plain JavaScript arrays or other math.gl objects.",source:"@site/../docs/modules/core/api-reference/matrix3.md",sourceDirName:"modules/core/api-reference",slug:"/modules/core/api-reference/matrix3",permalink:"/docs/modules/core/api-reference/matrix3",draft:!1,editUrl:"https://github.com/uber-web/math.gl/tree/master/website/../docs/modules/core/api-reference/matrix3.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Matrix",permalink:"/docs/modules/core/api-reference/matrix"},next:{title:"Matrix4",permalink:"/docs/modules/core/api-reference/matrix4"}},m={},s=[{value:"Usage",id:"usage",level:2},{value:"Inheritance",id:"inheritance",level:2},{value:"Methods",id:"methods",level:2},{value:"constructor()",id:"constructor",level:3},{value:"identity(): this",id:"identity-this",level:3},{value:"set(...number): this",id:"setnumber-this",level:3},{value:"fromQuaternion(q: Quaternion): this",id:"fromquaternionq-quaternion-this",level:3},{value:"determinant(): number",id:"determinant-number",level:3},{value:"transpose(): this",id:"transpose-this",level:3},{value:"invert(): this",id:"invert-this",level:3},{value:"multiplyLeft(matrix: number9): this",id:"multiplyleftmatrix-number9-this",level:3},{value:"multiplyRight(matrix: number9): this",id:"multiplyrightmatrix-number9-this",level:3},{value:"rotate(): this",id:"rotate-this",level:3},{value:"scale(factor: number2): this",id:"scalefactor-number2-this",level:3},{value:"translate(offset: number2): this",id:"translateoffset-number2-this",level:3},{value:"transformVector()",id:"transformvector",level:3},{value:"Remarks",id:"remarks",level:2}],p={toc:s},u="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"matrix3"},"Matrix3"),(0,a.kt)("p",null,"A 3x3 matrix. Any arguments can be plain JavaScript arrays or other ",(0,a.kt)("inlineCode",{parentName:"p"},"math.gl")," objects."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import {Matrix3} from `math.gl`;\n")),(0,a.kt)("p",null,"Copy a matrix to a ",(0,a.kt)("inlineCode",{parentName:"p"},"Matrix3")," so that it can be manipulated (and mutated) with ",(0,a.kt)("inlineCode",{parentName:"p"},"Matrix3")," methods:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const IDENTITY = [1, 0, ..., 1];\nconst m = new Matrix3(IDENTITY).translate([1, 0]);\n")),(0,a.kt)("p",null,"Invert a matrix"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const inverse = matrix.invert();\n")),(0,a.kt)("p",null,"Transform a vector as a point (including translations)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const transform = new Matrix3();\nconst vector2 = transform.transformPoint([1, 2]);\nconst vector3 = transform.transformPoint([1, 2, 1]);\n")),(0,a.kt)("p",null,"Transform a vector as a direction (NOT including translations)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const transform = new Matrix3();\nconst vector2 = transform.transformDirection([1, 2]);\nconst vector3 = transform.transformDirection([1, 2, 1]);\n")),(0,a.kt)("h2",{id:"inheritance"},"Inheritance"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"class Matrix3 extends [Matrix](./docs/api-reference/matrix) extends [MathArray](./docs/api-reference/math-array) extends [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)")),(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("p",null,"Many of the most commonly used methods are inherited from ",(0,a.kt)("a",{parentName:"p",href:"/docs/modules/core/api-reference/math-array"},(0,a.kt)("inlineCode",{parentName:"a"},"MathArray")),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"matrix3.clone()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"matrix3.copy(array)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"matrix3.set(...args)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"matrix3.fromArray(array, offset = 0)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"matrix3.toString()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"matrix3.toArray(array = [], offset = 0)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"matrix3.equals(array)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"matrix3.exactEquals(array)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"matrix3.validate(array = this)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"matrix3.check(array = this)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"matrix3.normalize()"))),(0,a.kt)("p",null,"Note that ",(0,a.kt)("inlineCode",{parentName:"p"},"Matrix3")," is a subclass of the built in JavaScript ",(0,a.kt)("inlineCode",{parentName:"p"},"Array")," and can thus e.g. be supplied as a parameter to any function expecting an ",(0,a.kt)("inlineCode",{parentName:"p"},"Array"),"."),(0,a.kt)("h3",{id:"constructor"},"constructor()"),(0,a.kt)("p",null,"Creates an empty ",(0,a.kt)("inlineCode",{parentName:"p"},"Matrix3")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"new Matrix3()")),(0,a.kt)("h3",{id:"identity-this"},"identity(): this"),(0,a.kt)("p",null,"Sets the matrix to the multiplicative identity matrix."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"matrix3.identity()")),(0,a.kt)("h3",{id:"setnumber-this"},"set(...number): this"),(0,a.kt)("p",null,"Sets the elements of the matrix."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"matrix3.set(m00, m01, m02, m10, m11, m12, m20, m21, m22)")),(0,a.kt)("h3",{id:"fromquaternionq-quaternion-this"},"fromQuaternion(q: Quaternion): this"),(0,a.kt)("p",null,"Sets the matrix to a transformation corresponding to the rotations represented by the given quaternion."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"matrix3.fromQuaternion(quaternion)")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"quaternion")," (",(0,a.kt)("inlineCode",{parentName:"li"},"Quaternion"),") - the quaternion to create matrix from")),(0,a.kt)("h3",{id:"determinant-number"},"determinant(): number"),(0,a.kt)("p",null,"Returns the determinant of the matrix (does not modify the matrix)."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"const determinant = matrix3.determinant()")),(0,a.kt)("p",null,"Returns (",(0,a.kt)("inlineCode",{parentName:"p"},"Number"),") - the determinant"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If the determinant is zero, the matrix is not invertible."),(0,a.kt)("li",{parentName:"ul"},"Determinant calculation is somewhat expensive.")),(0,a.kt)("h3",{id:"transpose-this"},"transpose(): this"),(0,a.kt)("p",null,"Sets this matrix to its transpose matrix."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"matrix3.transpose()")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The transpose matrix mirrors the original matrix elements in the diagonal.")),(0,a.kt)("h3",{id:"invert-this"},"invert(): this"),(0,a.kt)("p",null,"Sets this matrix to its inverse matrix."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"matrix3.invert()")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The inverse matrix times its original matrix is an identity matrix of the same size.")),(0,a.kt)("h3",{id:"multiplyleftmatrix-number9-this"},"multiplyLeft(matrix: number","[9]","): this"),(0,a.kt)("p",null,"Multiplies in another matrix from the left"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"matrix3.multiplyLeft(matrix3)")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"When using ",(0,a.kt)("inlineCode",{parentName:"li"},"Matrix3")," to transform vectors, the vectors are multiplied in from the right. This means that the multiplying in a matrix from the left will cause it to be applied last during transformation (unless additional matrices are multiplied in from the left of course).")),(0,a.kt)("h3",{id:"multiplyrightmatrix-number9-this"},"multiplyRight(matrix: number","[9]","): this"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"matrix3.multiplyRight(matrix3)")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"When using ",(0,a.kt)("inlineCode",{parentName:"li"},"Matrix3")," to transform vectors, the vectors are multiplied in from the right. This means that the multiplying in a matrix from the left will cause it to be applied last during transformation (unless additional matrices are multiplied in from the left of course).")),(0,a.kt)("h3",{id:"rotate-this"},"rotate(): this"),(0,a.kt)("p",null,"Adds a rotation by the given angle. Equivalent to right multiplying the new transform into the matrix but more performant."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"matrix3.rotate(radians)")),(0,a.kt)("h3",{id:"scalefactor-number2-this"},"scale(factor: number","[2]","): this"),(0,a.kt)("p",null,"Adds a scaling transform, each axis can be scaled independently."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"matrix3.scale(factor)")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"factor")," (Number) - scale factor to be applied to each axis.")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"matrix3.scale([x, y])")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"x")," (Number) - scale factor to be multiplied into x component"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"y")," (Number) - scale factor to be multiplied into y component")),(0,a.kt)("p",null,"Equivalent to right multiplying the new transform into the matrix but more performant."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"During vector transformation all coordinates will be multiplied with the given factors."),(0,a.kt)("li",{parentName:"ul"},"Scale with ",(0,a.kt)("inlineCode",{parentName:"li"},"-1")," will flip the coordinate system in that axis."),(0,a.kt)("li",{parentName:"ul"},"Scale with ",(0,a.kt)("inlineCode",{parentName:"li"},"0")," will drop that component.")),(0,a.kt)("h3",{id:"translateoffset-number2-this"},"translate(offset: number","[2]","): this"),(0,a.kt)("p",null,"Adds a translation to the matrix."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"matrix3.translate([x, y])")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"x")," (Number) - translation to be added to the x component"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"y")," (Number) - translation to be added to the y component")),(0,a.kt)("p",null,"Equivalent to right multiplying the new transform into the matrix but more performant."),(0,a.kt)("p",null,"During vector transformation the given translation values are added to each component of the vector being transformed."),(0,a.kt)("h3",{id:"transformvector"},"transformVector()"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"transformVector(vector, out)")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"vector")," (",(0,a.kt)("inlineCode",{parentName:"li"},"Array"),"|",(0,a.kt)("inlineCode",{parentName:"li"},"Vector2"),"|",(0,a.kt)("inlineCode",{parentName:"li"},"Vector3"),")"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"out")," - unless supplied, will be a ",(0,a.kt)("inlineCode",{parentName:"li"},"Vector2")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"Vector3"),", matching the length of input vector.\nReturns ",(0,a.kt)("inlineCode",{parentName:"li"},"out"),", or a newly minted ",(0,a.kt)("inlineCode",{parentName:"li"},"Vector2")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"Vector3"),".")),(0,a.kt)("h2",{id:"remarks"},"Remarks"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},'All transforms are effectively "right multiplied" onto the matrix (meaning that during transform they will be applied in opposite order).'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Matrix3")," is stored internally in column major format (per WebGL conventions). This only matters when you read out the matrix to use it with other software.")))}c.isMDXComponent=!0}}]);